<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" debug="true" scanPeriod="30 seconds">

	<!-- 이 부분에서 로그 저장소를 별도의 위치에 저장하도록 설정한다. -->
    <property name="LOGS_PATH" value="c:/javaworks/log" />

    <!-- 
		org.apache.log4j.ConsoleAppender 	콘솔에 로그 메시지 출력 
		org.apache.log4j.FileAppender    	파일에 로그 메시지 기록 
		org.apache.log4j.RollingFileAppender 파일에 로그 메시지 기록 (일정 크기가 되면 로그 파일 변경) 
		org.apache.log4j.DailyRollingFileAppender 파일에 로그 메시지 기록 (하루 단위로 로그 파일 변경) 
		org.apache.log4j.net.SMTPAppender 	로그 메시지를 이메일로 전송 
		org.apache.log4j.DBAppender         로그 메시지를 데이터베이스에 저장
     -->
     <!-- appender : 로그를 남기기 위한 방식을 정의 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}: --[%thread{10}] [%logger{20}] -- %msg%n </pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>        
		<!--
           %d{yyyy-MM-dd HH:mm:ss} : 년월일 시분초
           %thread : thread name
           %-5level : log level , -5는 출력 고정폭 값
           %logger{length} :Logger name의 이름, {length}는 자리수
           %msg : log message %message은 alias
           %n : 줄바꿈 
		-->        
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] [%logger{36}] - %msg%n</Pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOGS_PATH}/labatory_%d{yyyy-MM-dd HH}.%i.txt</fileNamePattern>
            <maxFileSize>3KB</maxFileSize> <!-- 로그 파일당 사이즈 한계 -->
            <maxHistory>30</maxHistory>		<!-- 30일 유지 -->
            <totalSizeCap>1GB</totalSizeCap> <!--로그의 총 용량 제한 -->
        </rollingPolicy>
    </appender>

    <!-- 로그 레벨
        FATAL: 치명적인 오류를 기록. 애플리케이션의 실행을 중단시킬 수 있는 심각한 문제를 나타냄.
        ERROR: 에러 메시지를 기록. 애플리케이션의 실행 중에 발생한 오류를 나타냄.
        WARN: 경고 메시지를 기록. 잠재적인 문제 나타냄.
        INFO: 일반적인 정보를 기록. 애플리케이션의 주요 이벤트를 알리는 데 사용.
        DEBUG: 디버깅 정보를 기록. 애플리케이션의 흐름을 추적하는 데 유용.
        TRACE: 가장 낮은 레벨로, 매우 상세한 정보를 기록. 주로 디버깅 목적으로 사용.
    -->

	<!-- 루트 로거와 지역 로거 
		1. 전역로거는 모든 지역 로고에 공통적으로 적용된다.
		2. 그러나 지역로거가 있으면 그 지역로거가 우선한다.
	-->
	<!-- 지역 로거 시작 -->
    <logger name="org.springframework" level="info"/>   <!-- Spring Framework 로그 설정 -->

	<!-- 애플리케이션의 로그 레벨 설정 -->
    <logger name="com.javalab.board" level="info"/>


    <!-- SQL 관련 설정 -->
    <logger name="jdbc.sqltiming" level="DEBUG"/> 		<!-- SQL 실행 시간 -->
    <logger name="jdbc.resultsettable" level="DEBUG"/> 	<!-- ResultSet 정보 -->
    <logger name="jdbc.audit" level="OFF"/> 			<!-- SQL 실행 결과 -->
    <logger name="jdbc.resultset" level="OFF"/> 		<!-- ResultSet 정보 -->
	<!-- 지역 로거 종료 -->
	
	<!-- 루트(전역) 로거, 최상위 레벨 설정 -->
    <root level="info"> 
        <appender-ref ref="CONSOLE"/> 	<!-- 콘솔에 로그 출력 -->
        <appender-ref ref="FILE"/>  	<!-- 파일에 로그 출력 -->
    </root>
</configuration>
